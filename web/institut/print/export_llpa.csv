<%--
    @TODO
    ===========================
    - Unterscheidung 1. HF und 2. HF ist derzeit nur, 
      ob das Fach in SignUp als Fach1 oder Fach2 
      gef¸hrt ist.

    - Geburtsland ist nicht bekannt -- lieber "Staat" nennen?

    - Sollte es ein Feld "Universit‰t" geben (damit das LLPA verallgemeinern kann?)

    - Anglistik-spezifika auslagern in fragment/conf_... files

    - Sicherheit: Login-Check; besser auch: Matrikelnummer noch
      als Parameter ¸bergeben.

    SYNOPSIS (German)
    ===========================
    2014, April 23, shj
    Erzeugt. 
    
    Soll pro Studierender/m Daten zum Staatsexamen nach 
    GymPO liefern (Fachnote, Fachdidaktik, what have you), 
    und zwar in einem Excel-Format.
    
    Expected SESSION PROPERTIES
    ===========================
    user       
    student     

    Expected PARAMETER(S):
    ===========================
    --

    signup-expected-backend-version [text], vgl. fragments/checkVersion.jsp
    
    Returns
    =======
    Object:
    Excel

    Fehler/Errors/THROWS
    ====================

    
--%><%@ page contentType="application/vnd.ms-excel" errorPage="../json/error.jsp" session="true" import="de.shj.UP.transcript.Fachnote,java.math.BigDecimal,de.shj.UP.data.shjCore,de.shj.UP.HTML.HtmlDate,java.sql.ResultSet" %><jsp:useBean id="user" scope="session" class="de.shj.UP.data.Dozent" /><jsp:useBean id="student" scope="session" class="de.shj.UP.beans.config.student.StudentBean" />Anrede;Matrikelnr;Name;Vorname;Geburstdatum;Geburtsort;Geburtsland;Straﬂe;PLZ;Ort;Mobilnr;E-Mail stud;E-Mail privat;;HF1;HF1_LP;HF1_FN;HF1_FS;HF1_FD;HF1_FD_LP;HF1_ZP;;HF2;HF2_LP;HF2_FN;HF2_FS;HF2_FD;HF2_FD_LP;HF2_ZP;;EPG_Note;EPG_Note_Text;EPG_LP;MPK_NW;MPK_LP;SPS_NW;SPS_LP;WA_FACH;WA_THEMA;WA_NOTE;WA_LP;;EF_HF;EF_BF;EF_LP;EF_FN;EF_FS;EF_FD;EF_FD_Text;EF_FD_LP;EF_HF_FD_Note;EF_HF_FD_LP;EF_ERGM_LP
<%@include file="../fragments/conf_llpa.jsp" %><%
    /*
     * Stoﬂe Berechnung der Fachnote und LP-Summe an:
     */
    Fachnote note=new Fachnote(student.getMatrikelnummer(), user.getSdSeminarID(), student.getFachID(user.getSdSeminarID()));
    
    /**
     * Auslagelagert in fragments/conf:
     * Welche Leistungen gehˆren zur Fachdidaktik?
     * Welche Pr¸fungen sind Zwischenpr¸fungen?
     *     String sFachdidaktik="(20220,20230)";
     *    String sZP = "(200001)";
     */
    
    Fachdidaktik fd=getFachdidaktik(student, sFachdidaktik);
    String sHFSwitch="";
    
    /**
     * Der Eintrag im Excel-Dokument erfolgt acht Spalten weiter 
     * rechts, wenn das Fach im aktuellen Seminar das 2. Hauptfach ist
     * (dann werden also acht Semikolons eingef¸gt).
     * 
     * Ansonsten unterscheiden sich HF1 und HF2 nicht voneinander.
     * Dazu l‰uft aber bereits eine R¸ckfrage ans Pr¸fungsamt.
     */
    if(student.Fach().getFachID()!=student.getStudentFach1()) sHFSwitch=";;;;;;;;";
%>"<%=student.getStudentFemale() ? "Frau":"Herr" %>";"<%=student.getMatrikelnummer()%>";"<%=student.getStudentNachname()%>";"<%=student.getStudentVorname()%>";<%=shjCore.g_GERMAN_DATE_FORMAT.format(student.getStudentGeburtstag())%>;"<%=student.getStudentGeburtsort()%>";"<%=student.getStudentStaat()%>";"<%=student.getStudentStrasse()%>";"<%=student.getStudentPLZ()%>";"<%=student.getStudentOrt()%>";"<%=student.getStudentHandy()%>";"<%=student.getStudentEmail()%>";"keine priv. Email bekannt";;<%=sHFSwitch%>"<%=student.Fach().getFachBezeichnung() %>";"<%=String.valueOf(note.getSummeLPErreicht()).replace('.',',')%>";"<%=note.getGrade().replace('.',',')%>";<%=student.getFachsemester()%>;"<%=String.valueOf(fd.m_note).replace('.', ',') %>";"<%=String.valueOf(fd.m_lp).replace('.',',')%>";"<%=hasZP(student, sZP) ? "bestanden" : "fehlt" %>"
<%!
boolean hasZP(de.shj.UP.beans.config.student.StudentBean st, String sZP_conf){
    long lNumberOfZP=0;
    try{
        lNumberOfZP=st.dbCount("lngSdSeminarID", "tblBdStudentXPruefung",
                "\"lngSdSeminarID\"=" + st.getSeminarID() + " and " + 
                 "\"lngSdPruefungsID\" in " + sZP_conf + " and " + 
                 "\"strMatrikelnummer\"='" + st.getMatrikelnummer() + "' and " + 
                  "\"blnStudentPruefungBestanden\"=true");
    }catch(Exception eNotNumeric){}
    return (lNumberOfZP>0);
}
Fachdidaktik getFachdidaktik(de.shj.UP.beans.config.student.StudentBean st, String sFachdidaktik_conf)throws Exception{
    ResultSet rFachdidaktik = st.sqlQuery("SELECT " +
        "n.\"sngNoteECTSCalc\"," +
        "x.\"sngStudentLeistungCreditPts\" " +
      "FROM " +
        "\"tblBdStudentXLeistung\" x, " +
        "\"tblSdNote\" n " +
      "WHERE " +
        "n.\"lngSdSeminarID\" = x.\"lngSdSeminarID\" AND " +
        "n.\"intNoteID\" = x.\"intNoteID\" AND " +
        "n.\"blnNoteBestanden\" = true AND " +
        "x.\"strMatrikelnummer\"='" + st.getMatrikelnummer() + "' and " +
        "x.\"lngLeistungsID\" in " + sFachdidaktik_conf + " and " +
        "x.\"lngSdSeminarID\"=" + st.getSeminarID() + ";");
    
        BigDecimal fModulnote;
        BigDecimal fScalarProduct=new BigDecimal("0");
        BigDecimal fActualDivisor=new BigDecimal("0");
        
        while(rFachdidaktik.next()){
            fScalarProduct=fScalarProduct.add(rFachdidaktik.getBigDecimal("sngNoteECTSCalc").multiply(rFachdidaktik.getBigDecimal("sngStudentLeistungCreditPts")));
            fActualDivisor=fActualDivisor.add(rFachdidaktik.getBigDecimal("sngStudentLeistungCreditPts"));
        }
        
        try{
            fModulnote=fScalarProduct.divide(fActualDivisor);
        }catch(Exception e){
            return new Fachdidaktik(fActualDivisor.doubleValue(),0);
        }
        return new Fachdidaktik(fActualDivisor.doubleValue(),fModulnote.doubleValue());
};

public static class Fachdidaktik{
    double m_lp=0;
    double m_note=0;
    public Fachdidaktik(double lp, double note){
        this.m_lp=lp;
        this.m_note=note;
    }
}
%>